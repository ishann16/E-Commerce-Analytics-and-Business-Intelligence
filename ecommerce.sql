CREATE DATABASE ecommerce;
USE ecommerce;

-- List of all unique cities
SELECT DISTINCT customer_city FROM customers;

-- count number of orders placed in 2017
SELECT COUNT(order_id) FROM orders WHERE YEAR(order_purchase_timestamp) = 2017;

-- Find the total sales per category
SELECT product_category, ROUND(SUM(payment_value),2) as sales_perCategory
FROM products JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON order_items.order_id = payments.order_id
GROUP BY product_category;

-- Find percentage of payments paid by installments
SELECT (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END))*100/count(*) from payments;

-- Count number of customers from each state
SELECT customer_state, COUNT(customer_id) as customer_from_each_state FROM customers GROUP BY customer_state;

-- Calculate the number of orders per month in 2018.
SELECT MonthName(order_purchase_timestamp) AS order_month, COUNT(order_id) FROM orders WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY order_month; 

-- Find the average number of products per order, grouped by customer city.
WITH count_per_order AS (SELECT orders.customer_id, COUNT(order_items.order_item_id) AS pc, orders.order_id
FROM  orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.customer_id, orders.order_id) 
SELECT customers.customer_city, AVG(count_per_order.pc) FROM customers JOIN count_per_order
ON customers.customer_id = count_per_order.customer_id GROUP BY customers.customer_city;

-- Calculate the percentage of total revenue contributed by each product category.
-- Wrong
WITH category_revenue AS
(SELECT products.product_category, SUM(order_items.price + order_items.freight_value) AS revenue_perCategory FROM products
JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_category),
total_revenue AS (SELECT SUM(revenue_perCategory) as totalRevenue FROM category_revenue)
SELECT product_category, ROUND((revenue_perCategory*100/totalRevenue),2) AS per FROM category_revenue, total_revenue ORDER BY per DESC;
 -- Right
SELECT product_category, ROUND( SUM(payments.payment_value)*100 / (SELECT SUM(payment_value) FROM payments),2) as sales
FROM products JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON order_items.order_id = payments.order_id GROUP BY product_category ORDER BY sales DESC;

-- Identify the correlation between product price and the number of times a product has been purchased.
SELECT products.product_category, COUNT(order_items.product_id), ROUND(AVG(order_items.price),2)
FROM products JOIN order_items ON products.product_id = order_items.product_id 
GROUP BY products.product_category;

-- Calculate the total revenue generated by each seller, and rank them by revenue
SELECT *, RANK() OVER(ORDER BY revenue DESC) AS rn FROM
(SELECT sellerss.seller_id, ROUND(SUM(order_items.price + order_items.freight_value),2) as revenue
FROM sellerss JOIN order_items ON sellerss.seller_id = order_items.seller_id
GROUP BY sellerss.seller_id ORDER BY revenue DESC) as a;

-- Calculate the moving average of order values for each customer over their order history.
SELECT customer_id, order_purchase_timestamp, AVG(payment) OVER(PARTITION BY customer_id ORDER BY order_purchase_timestamp
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS move_avg, payment FROM
(SELECT orders.customer_id, orders.order_purchase_timestamp, payments.payment_value as payment FROM orders JOIN payments
ON orders.order_id = payments.order_id) AS A;

-- Calculate the cumulative sales per month for each year.
SELECT years, months, ROUND(payment,2), ROUND(SUM(payment) OVER(ORDER BY years, months),2) AS cum_payment FROM
(SELECT YEAR(orders.order_purchase_timestamp) AS years, MONTH(orders.order_purchase_timestamp) as months, 
SUM(payments.payment_value) as payment FROM orders JOIN payments
ON orders.order_id = payments.order_id GROUP BY years, months ORDER BY years, months) AS A;

-- Calculate year over year growth rate
WITH B AS(WITH A as (SELECT YEAR(orders.order_purchase_timestamp) AS years, ROUND(SUM(payments.payment_value),2) as payment
FROM orders JOIN payments ON orders.order_id = payments.order_id GROUP BY years ORDER BY years)
SELECT years, payment, lag(payment, 1) OVER(ORDER BY years) as prev_year FROM A)
SELECT years, payment, prev_year, ROUND(((payment-prev_year)*100/prev_year),2) AS growth FROM B;

-- Identify the top 3 customers who spent the most money in each year.
SELECT dates, customer_id, payment, ranking FROM
(SELECT dates, customer_id, payment, RANK() OVER(PARTITION BY dates ORDER BY payment DESC) as ranking FROM 
(SELECT customers.customer_id, YEAR(orders.order_purchase_timestamp) as dates, SUM(payments.payment_value) as payment FROM orders 
JOIN customers ON orders.customer_id = customers.customer_id
JOIN payments ON orders.order_id = payments.order_id GROUP BY customers.customer_id, orders.order_purchase_timestamp ORDER BY dates) AS X)
AS Y WHERE ranking<=3;











